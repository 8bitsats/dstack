syntax = "proto3";

import "google/protobuf/empty.proto";

package kms;

message GetAppKeyRequest {
  // The app compose file
  string app_compose = 2;
}

message AppId {
  bytes app_id = 1;
}

message PublicKeyResponse {
  bytes public_key = 1;
}

message AppKeyResponse {
  string ca_cert = 1;
  bytes disk_crypt_key = 2;
  bytes env_crypt_key = 3;
  bytes k256_key = 4;
  bytes k256_signature = 5;
  string tproxy_app_id = 6;
}

message GetMetaResponse {
  string ca_cert = 1;
  bool allow_any_upgrade = 2;
  bytes k256_pubkey = 3;
  BootstrapResponse bootstrap_info = 4;
}

message KmsKeys {
  string ca_key = 1;
  bytes k256_key = 2;
}

message KmsKeyResponse {
  string tmp_ca_key = 1;
  repeated KmsKeys keys = 2;
}

message GetTempCaCertResponse {
  string temp_ca_cert = 1;
  string temp_ca_key = 2;
  string ca_cert = 3;
}

message SignCertRequest {
  bytes csr = 1;
  bytes signature = 2;
}

message SignCertResponse {
  repeated string certificate_chain = 1;
}

// The kms public RPC service.
service KMS {
  // Request the app key given the app id and tdx quote
  rpc GetAppKey(GetAppKeyRequest) returns (AppKeyResponse);
  // KMS key handover
  rpc GetKmsKey(google.protobuf.Empty) returns (KmsKeyResponse);
  // Request the app environment encryption public key given the app id
  rpc GetAppEnvEncryptPubKey(AppId) returns (PublicKeyResponse);
  // Request the KMS instance metadata for use as a probe and health check.
  rpc GetMeta(google.protobuf.Empty) returns (GetMetaResponse);
  // Request the temporary CA certificate and key
  rpc GetTempCaCert(google.protobuf.Empty) returns (GetTempCaCertResponse);
  // Sign a certificate
  rpc SignCert(SignCertRequest) returns (SignCertResponse);
}

message BootstrapRequest {
  string domain = 1;
}

message BootstrapResponse {
  bytes ca_pubkey = 1;
  bytes k256_pubkey = 2;
  bytes quote = 3;
  bytes eventlog = 4;
}

message OnboardRequest {
  string source_url = 1;
  string domain = 2;
}

message OnboardResponse {
}

// The Onboard RPC service.
service Onboard {
  // Bootstrap a new KMS
  rpc Bootstrap(BootstrapRequest) returns (BootstrapResponse);
  // Onboard from existing KMS
  rpc Onboard(OnboardRequest) returns (OnboardResponse);
  // Finish onboarding
  rpc Finish(google.protobuf.Empty) returns (google.protobuf.Empty);
}
