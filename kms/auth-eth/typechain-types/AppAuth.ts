/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IAppAuth {
  export type AppBootInfoStruct = {
    appId: AddressLike;
    composeHash: BytesLike;
    instanceId: AddressLike;
    deviceId: BytesLike;
    mrEnclave: BytesLike;
    mrImage: BytesLike;
  };

  export type AppBootInfoStructOutput = [
    appId: string,
    composeHash: string,
    instanceId: string,
    deviceId: string,
    mrEnclave: string,
    mrImage: string
  ] & {
    appId: string;
    composeHash: string;
    instanceId: string;
    deviceId: string;
    mrEnclave: string;
    mrImage: string;
  };
}

export interface AppAuthInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addComposeHash"
      | "allowedComposeHashes"
      | "appId"
      | "isAppAllowed"
      | "owner"
      | "removeComposeHash"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ComposeHashAdded" | "ComposeHashRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addComposeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedComposeHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAppAllowed",
    values: [IAppAuth.AppBootInfoStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeComposeHash",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addComposeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedComposeHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAppAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeComposeHash",
    data: BytesLike
  ): Result;
}

export namespace ComposeHashAddedEvent {
  export type InputTuple = [composeHash: BytesLike];
  export type OutputTuple = [composeHash: string];
  export interface OutputObject {
    composeHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComposeHashRemovedEvent {
  export type InputTuple = [composeHash: BytesLike];
  export type OutputTuple = [composeHash: string];
  export interface OutputObject {
    composeHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AppAuth extends BaseContract {
  connect(runner?: ContractRunner | null): AppAuth;
  waitForDeployment(): Promise<this>;

  interface: AppAuthInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addComposeHash: TypedContractMethod<
    [composeHash: BytesLike],
    [void],
    "nonpayable"
  >;

  allowedComposeHashes: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  appId: TypedContractMethod<[], [string], "view">;

  isAppAllowed: TypedContractMethod<
    [bootInfo: IAppAuth.AppBootInfoStruct],
    [[boolean, string] & { isAllowed: boolean; reason: string }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeComposeHash: TypedContractMethod<
    [composeHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addComposeHash"
  ): TypedContractMethod<[composeHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowedComposeHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "appId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAppAllowed"
  ): TypedContractMethod<
    [bootInfo: IAppAuth.AppBootInfoStruct],
    [[boolean, string] & { isAllowed: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeComposeHash"
  ): TypedContractMethod<[composeHash: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "ComposeHashAdded"
  ): TypedContractEvent<
    ComposeHashAddedEvent.InputTuple,
    ComposeHashAddedEvent.OutputTuple,
    ComposeHashAddedEvent.OutputObject
  >;
  getEvent(
    key: "ComposeHashRemoved"
  ): TypedContractEvent<
    ComposeHashRemovedEvent.InputTuple,
    ComposeHashRemovedEvent.OutputTuple,
    ComposeHashRemovedEvent.OutputObject
  >;

  filters: {
    "ComposeHashAdded(bytes32)": TypedContractEvent<
      ComposeHashAddedEvent.InputTuple,
      ComposeHashAddedEvent.OutputTuple,
      ComposeHashAddedEvent.OutputObject
    >;
    ComposeHashAdded: TypedContractEvent<
      ComposeHashAddedEvent.InputTuple,
      ComposeHashAddedEvent.OutputTuple,
      ComposeHashAddedEvent.OutputObject
    >;

    "ComposeHashRemoved(bytes32)": TypedContractEvent<
      ComposeHashRemovedEvent.InputTuple,
      ComposeHashRemovedEvent.OutputTuple,
      ComposeHashRemovedEvent.OutputObject
    >;
    ComposeHashRemoved: TypedContractEvent<
      ComposeHashRemovedEvent.InputTuple,
      ComposeHashRemovedEvent.OutputTuple,
      ComposeHashRemovedEvent.OutputObject
    >;
  };
}
